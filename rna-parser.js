/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Start: peg$parseStart },
      peg$startRuleFunction  = peg$parseStart,

      peg$c0 = function(r) {return r.join("")},
      peg$c1 = peg$otherExpectation("Protein"),
      peg$c2 = function() {return "Leu"},
      peg$c3 = function() {return "Val"},
      peg$c4 = function() {return "Thr"},
      peg$c5 = function() {return "Pro"},
      peg$c6 = function() {return "Ser"},
      peg$c7 = function() {return "Ala"},
      peg$c8 = function() {return "Arg"},
      peg$c9 = function() {return "Gly"},
      peg$c10 = function() {return "Phe"},
      peg$c11 = function() {return "Ile"},
      peg$c12 = function() {return "Met"},
      peg$c13 = function() {return "Asp"},
      peg$c14 = function() {return "Glu"},
      peg$c15 = function() {return "Asn"},
      peg$c16 = function() {return "Lys"},
      peg$c17 = function() {return "His"},
      peg$c18 = function() {return "Gln"},
      peg$c19 = function() {return "Tyr"},
      peg$c20 = function() {return "Stop"},
      peg$c21 = function() {return "Cys"},
      peg$c22 = function() {return "Trp"},
      peg$c23 = "A",
      peg$c24 = peg$literalExpectation("A", false),
      peg$c25 = "a",
      peg$c26 = peg$literalExpectation("a", false),
      peg$c27 = "T",
      peg$c28 = peg$literalExpectation("T", false),
      peg$c29 = "t",
      peg$c30 = peg$literalExpectation("t", false),
      peg$c31 = "C",
      peg$c32 = peg$literalExpectation("C", false),
      peg$c33 = "c",
      peg$c34 = peg$literalExpectation("c", false),
      peg$c35 = "G",
      peg$c36 = peg$literalExpectation("G", false),
      peg$c37 = "g",
      peg$c38 = peg$literalExpectation("g", false),
      peg$c39 = "U",
      peg$c40 = peg$literalExpectation("U", false),
      peg$c41 = "u",
      peg$c42 = peg$literalExpectation("u", false),
      peg$c43 = "",
      peg$c44 = peg$otherExpectation("New line"),
      peg$c45 = "\n",
      peg$c46 = peg$literalExpectation("\n", false),
      peg$c47 = peg$otherExpectation("Whitespace"),
      peg$c48 = /^[ \t]/,
      peg$c49 = peg$classExpectation([" ", "\t"], false, false),
      peg$c50 = peg$otherExpectation("One or more whitespaces"),
      peg$c51 = "-",
      peg$c52 = peg$literalExpectation("-", false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseRNA();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRNA() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseP();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseRNA();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseeps();
    }

    return s0;
  }

  function peg$parseP() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseP1();
    if (s0 === peg$FAILED) {
      s0 = peg$parseP2();
      if (s0 === peg$FAILED) {
        s0 = peg$parseP3();
        if (s0 === peg$FAILED) {
          s0 = peg$parseP4();
          if (s0 === peg$FAILED) {
            s0 = peg$parseP5();
            if (s0 === peg$FAILED) {
              s0 = peg$parseP6();
              if (s0 === peg$FAILED) {
                s0 = peg$parseP7();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseP8();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseP9();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseP10();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseP11();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseP12();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseP13();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseP14();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseP15();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseP16();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseP17();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseP18();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseP19();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseP20();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseP21();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseP22();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseP23();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseP24();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseP25();
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c1); }
    }

    return s0;
  }

  function peg$parseP1() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseC();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP2() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP3() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP4() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseC();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP5() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP6() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseC();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP7() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseC();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP8() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenucleotide();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP9() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseC();
        if (s3 === peg$FAILED) {
          s3 = peg$parseU();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP10() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseG();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP11() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
          if (s3 === peg$FAILED) {
            s3 = peg$parseU();
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c11();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP12() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseU();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseG();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c12();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP13() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseU();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c13();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP14() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseG();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c14();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP15() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseU();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c15();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP16() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseG();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP17() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseC();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseU();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP18() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseC();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseG();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP19() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseU();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP20() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseA();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseG();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP21() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseU();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP22() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseG();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c22();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP23() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseU();
        if (s3 === peg$FAILED) {
          s3 = peg$parseC();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP24() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseA();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 === peg$FAILED) {
          s3 = peg$parseG();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseP25() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseG();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseA();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenucleotide() {
    var s0;

    s0 = peg$parseA();
    if (s0 === peg$FAILED) {
      s0 = peg$parseG();
      if (s0 === peg$FAILED) {
        s0 = peg$parseC();
        if (s0 === peg$FAILED) {
          s0 = peg$parseU();
        }
      }
    }

    return s0;
  }

  function peg$parseA() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 65) {
      s0 = peg$c23;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 97) {
        s0 = peg$c25;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c26); }
      }
    }

    return s0;
  }

  function peg$parseT() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 84) {
      s0 = peg$c27;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c28); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 116) {
        s0 = peg$c29;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
    }

    return s0;
  }

  function peg$parseC() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 67) {
      s0 = peg$c31;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 99) {
        s0 = peg$c33;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
    }

    return s0;
  }

  function peg$parseG() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 71) {
      s0 = peg$c35;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 103) {
        s0 = peg$c37;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c38); }
      }
    }

    return s0;
  }

  function peg$parseU() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 85) {
      s0 = peg$c39;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 117) {
        s0 = peg$c41;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
    }

    return s0;
  }

  function peg$parseeps() {
    var s0;

    s0 = peg$c43;

    return s0;
  }

  function peg$parsenl() {
    var s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c45;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }

    return s0;
  }

  function peg$parsews() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c48.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c49); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c47); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsews();
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    return s0;
  }

  function peg$parsediv() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c51;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
